// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"drbh/partita/background"
	"drbh/partita/collision"
	"drbh/partita/connection"
	"drbh/partita/game"
	"drbh/partita/match"
	"drbh/partita/redis"
	"drbh/partita/websocket"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeMatch is a Wire provider function that provides an instance of MatchmakingController.
func InitializeMatch() match.MatchmakingController {
	myRedisService := redis.GetMyRedisServiceInstance()
	matchmakingService := match.NewMatchmakingService(myRedisService)
	matchmakingController := match.NewMatchmakingController(matchmakingService)
	return matchmakingController
}

// InitializeWebSocket is a Wire provider function that provides an instance of WebsocketController.
func InitializeWebSocket() websocket.WebsocketController {
	connectionService := connection.GetConnectionServiceInstance()
	myRedisService := redis.GetMyRedisServiceInstance()
	matchmakingService := match.NewMatchmakingService(myRedisService)
	gameService := game.GetGameServiceInstance()
	lineSegmentManager := collision.GetLineSegmentManagerInstance()
	websocketController := websocket.NewWebsocketController(connectionService, matchmakingService, gameService, lineSegmentManager)
	return websocketController
}

// InitalizeConnection is a Wire provider function that provides an instance of ConnectionService.
func InitalizeConnection() *connection.ConnectionService {
	connectionService := connection.GetConnectionServiceInstance()
	return connectionService
}

// InitializeBackgroundService is a Wire provider function that provides an instance of BackgroundService.
func InitializeBackgroundService() background.BackgroundServiceInterface {
	connectionService := connection.GetConnectionServiceInstance()
	myRedisService := redis.GetMyRedisServiceInstance()
	matchmakingService := match.NewMatchmakingService(myRedisService)
	gameService := game.GetGameServiceInstance()
	lineSegmentManager := collision.GetLineSegmentManagerInstance()
	backgroundServiceInterface := background.NewBackgroundService(connectionService, matchmakingService, gameService, lineSegmentManager)
	return backgroundServiceInterface
}

// wire.go:

// SuperSet is a Wire provider set that includes all the providers needed for the application.
var SuperSet = wire.NewSet(connection.ProvideConnectionService, redis.ProvideMyRedisService, game.ProvideGameService)
